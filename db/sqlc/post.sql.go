// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  id,
  post,
  created_at,
  created_by,
  updated_at,
  updated_by
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, post, created_at, created_by, updated_at, updated_by
`

type CreatePostParams struct {
	ID        uuid.UUID      `json:"id"`
	Post      string         `json:"post"`
	CreatedAt time.Time      `json:"created_at"`
	CreatedBy string         `json:"created_by"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	UpdatedBy sql.NullString `json:"updated_by"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Post,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Post,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getPostById = `-- name: GetPostById :one
SELECT id, post, created_at, created_by, updated_at, updated_by FROM posts
WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Post,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
